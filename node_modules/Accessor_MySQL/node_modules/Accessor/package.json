{
  "author": {
    "name": "Buwei Chiu",
    "email": "bu@hax4.in",
    "url": "https://github.com/bu/"
  },
  "name": "Accessor",
  "description": "A database wrapper, provide easy access to databases",
  "version": "0.3.2",
  "homepage": "https://github.com/bu/Accessor",
  "repository": {
    "type": "git",
    "url": "git://github.com/bu/Accessor.git"
  },
  "dependencies": {
    "Accessor_Singleton": ">=0.1.0"
  },
  "devDependencies": {},
  "optionalDependencies": {
    "Accessor_Singleton": ">=0.1.0"
  },
  "engines": {
    "node": "*"
  },
  "_npmUser": {
    "name": "bu",
    "email": "bu@hax4.in"
  },
  "readme": "# Accessor 0.2.0\n\nA database wrapper, provide easy access to databases.\n\n---\n\n## Install & Setup\n\n1. Install through npm, following command will do that:\n\n\t\tnpm install Accessor\n\t\t\n2. Choose one of available database wrapper for your environment.\n\n3. Now, Accessor is ready to use. Create config file if wrapper required.\n\n## Available Database Wrapper\n\n### MongoDB\n* http://github.com/bu/Accessor_MongoDB \n* **DBMS parameter:** MongoDB\n\n### MySQL\n\n* http://github.com/bu/Accessor_MySQL\n* **DBMS parameter:** MySQL \n\n## Usage\n\n1. Require the Accessor module in your script\n\n\t\tvar Accessor = require(\"Accessor\");\n\n2. Place constructor where you need the Accessor\n\n\t\tvar tester = Accessor(\"YOUR_TARGET_TABLE\", \"DBMS\"]);\n\t\t\n\t**Note: ** DBMS parameter could be emitted, if you installed just one module within your application. Accessor will automatically lookup your installed modules following Accessor directory to check if a suitable module is availiable.\n\t\n\t**P.S.** YOUR_TARGET_TABLE may mean different things by different database wrapper, but it should automaticlly do the same thing.\n\n3. After initialized, please refer to wrapper documents for accessing database.\n\n## Interface\n\nFollowing methods are implements by our wrappers:\n\n### SELECT\n\n\tvar options = {\n\t\t// where: this option is differ from wrappers\n\t\twhere: Object or Array even String,\n\t\t\n\t\t// limit: the count of return data\n\t\tlimit: 10 (default: no limit)\n\t\t\n\t\t// we should start lookup data at cursor position #XXX\n\t\toffset: 100 (default: 0)\n\t\t\n\t\t// we should pick up which fields / keys\n\t\tfields: [\"field1\",\"field2\"]\n\t};\n\t\n\tdb.select(options, callback(err, data));\n\t\n\t// data is a array contains queried data \n\n### INSERT\n\n\tdb.insert(dataObject, callback(err, info));\n\t\n\t// callback parameter info = {success: INSERT_ID};\n\t\n### REMOVE\n\n\tdb.remove(options, callback(err, info));\n\t\n\t// * method parameter options is a object only exists \"where\" as same as SELECT\n\t// callback parameter info = {success: affect rows};\n\t\n### UPDATE\n\n\tdb.update(options, replaceDataObject, callback(err, info));\n\t\n\t// * method parameter options is a object only exists \"where\" as same as SELECT\n\t// * callback parameter info = {success: affect rows};\n\n### OTHER METHOD\n\nSome wrapper may define their own method, which is not implemented in all wrappers. Use them with care.\n\n\n## LICENSE\n\nCopyright (c) 2012 Buwei Chiu <bu@hax4.in>\n\nLicensed under the MIT License\n",
  "readmeFilename": "README.md",
  "_id": "Accessor@0.3.2",
  "dist": {
    "shasum": "c6d4d281e9d0d30af2850eaf608fc09d2e351b37",
    "tarball": "http://registry.npmjs.org/Accessor/-/Accessor-0.3.2.tgz"
  },
  "_npmVersion": "1.1.65",
  "maintainers": [
    {
      "name": "bu",
      "email": "bu@hax4.in"
    }
  ],
  "directories": {},
  "_shasum": "c6d4d281e9d0d30af2850eaf608fc09d2e351b37",
  "_resolved": "https://registry.npmjs.org/Accessor/-/Accessor-0.3.2.tgz",
  "_from": "Accessor@>=0.2.0"
}
